AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  ClusterAMI:
    Description: ECS Optimized AMI
    Type: String

  CertificateArn:
    Description: ARN of the ACM SSL certificate
    Type: String

  MasterECR:
    Description: URL of ECR repository for Jenkins Master
    Type: String
    
  MasterECRTag:
    Description: Tag of ECR repository for Jenkins Master
    Type: String

  Route53HostedZone:
    Description: The NAME of the Route53 hosted zone
    Type: String

  AdminIpAddress:
    Description: The IP address to access instances via SSH
    Type: String

  KeyName:
    Description: Key-pair to use for EC2 hosts
    Type: String

  HealthCheckPath:
    Description: Health check path for Jenkins (must respond 200 OK)
    Type: String
    Default: /login?from=%2F
    
  NumberOfSpotInstances:
    Description: Number of EC2 hosts to add to the ECS cluster
    Type: Number
    Default: 2
    
  InstanceType:
    Description: Instance type of the EC2 hosts
    Type: String
    Default: c5.large
    
  CpuUnits:
    Type: Number
    Default: 2048
  
  MemoryUnits:
    Type: Number
    Default: 3709
    
  JenkinsPort:
    Type: Number
    Default: 8080
    
  JenkinsJnlpPort:
    Type: Number
    Default: 50000

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
          
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
          
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-1
          
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-2
          
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-3
          
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pri-1
          
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pri-2
          
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pri-3
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub
      
  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
      
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pri
      
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
      
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
      
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
      
  FileSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS mount targets
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ClusterSecurityGroup
          
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the load balancer that sits in front of ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      
  AdminSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Admin
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref AdminIpAddress

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
      Tags: 
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 9
      HealthCheckIntervalSeconds: 10

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      KmsKeyId: !GetAtt FileSystemKey.Arn
      FileSystemTags:
        - Key: Name
          Value: !Ref EnvironmentName

  FileSystemKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM user permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'

  MountTarget1: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups: 
        - !Ref FileSystemSecurityGroup

  MountTarget2: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups: 
        - !Ref FileSystemSecurityGroup

  MountTarget3: 
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet3
      SecurityGroups: 
        - !Ref FileSystemSecurityGroup

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EnvironmentName

  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-spot-fleet
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${EnvironmentName}-ecs-cluster
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: !Sub ${EnvironmentName}-ecs-service
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ClusterRole

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        IamFleetRole: !GetAtt SpotFleetRole.Arn
        TargetCapacity: !Ref NumberOfSpotInstances
        LaunchSpecifications:
          - InstanceType: !Ref InstanceType
            ImageId: !Ref ClusterAMI
            KeyName: !Ref KeyName
            SecurityGroups:
              - GroupId: !Ref ClusterSecurityGroup
              - GroupId: !Ref AdminSecurityGroup
            SubnetId: !Join [ ',', [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]
            IamInstanceProfile:
              Arn: !GetAtt ClusterInstanceProfile.Arn
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash -xe
                  echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                  echo ECS_ENABLE_CONTAINER_METADATA=true >> /etc/ecs/ecs.config
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !Ref EnvironmentName

  MasterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /ecs/${EnvironmentName}-master
      RetentionInDays: 365

  MasterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-master
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-master
          Essential: true
          Privileged: true
          Image: !Sub ${MasterECR}:${MasterECRTag}
          Cpu: !Ref CpuUnits
          Memory: !Ref MemoryUnits
          PortMappings:
            - ContainerPort: !Ref JenkinsPort
            - ContainerPort: !Ref JenkinsJnlpPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-group: !Ref MasterLogGroup
          Environment:
            - Name: MOUNT_OPTIONS
              Value: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2
            - Name: MOUNT_TYPE
              Value: nfs4
            - Name: MOUNT_VOLUME
              Value: !Sub ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/

  MasterService: 
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-master
      Cluster: !Ref ECSCluster
      Role: !Ref ServiceRole
      DesiredCount: 1
      TaskDefinition: !Ref MasterTaskDefinition
      LoadBalancers: 
        - ContainerName: !Sub ${EnvironmentName}-master
          TargetGroupArn: !Ref DefaultTargetGroup
          ContainerPort: !Ref JenkinsPort
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
      HealthCheckGracePeriodSeconds: 20
          
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref Route53HostedZone
      Name: !Sub ${EnvironmentName}.${Route53HostedZone}
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: false
        
